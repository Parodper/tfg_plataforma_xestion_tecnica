openapi: "3.1.0"
info:
  title: "API"
  version: "1.0"
paths:
  /template:
    post:
      summary: "Create a new template"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewTemplate"
      responses:
        "201":
          description: "Created template, returning ID"
          content:
            application/json:
              schema:
                type: int
        "400":
          description: "Bad template format"
        "422":
          description: "Another template with the same name already exists"
        "403":
          description: "User not allowed to create templates"
    get:
      summary: "Gets a list of template ID"
      responses:
        "200":
          description: "Returns a list of ID"
          content:
            application/json:
              schema:
                type: array
                item:
                  type: int
  /template/{templateId}:
    parameters:
      - $ref: "#/components/parameters/templateId"
    get:
      summary: "Returns the Template selected by the given ID"
      responses:
        "200":
          description: "Template selected"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewTemplate"
        "404":
          description: "Template not found"
    post:
      summary: "Updates the Template"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewTemplate"
      responses:
        "204":
          description: "Template updated"
        "422":
          description: "User not allowed to modify templates"
        "404":
          description: "Template not found"
  /template/{templateId}/fields:
    parameters:
      - $ref: "#/components/parameters/templateId"
    get:
      summary: "Returns the fields of the Template"
      responses:
        "200":
          description: "List of fields"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FieldTemplate"
        "404":
          description: "Template not found"
  /template/{templateId}/fields/{fieldId}:
    parameters:
      - in: path
        description: "ID of the field"
        name: fieldId
        required: true
        schema:
          type: integer
      - $ref: "#/components/parameters/templateId"
    get:
      summary: "Returns the selected field template"
      responses:
        "200":
          description: "Returning field"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FieldTemplate"
    post:
      summary: "Modifies the selected field"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FieldTemplate"
      responses:
        "204":
          description: "Successfully updated. If the field type is updated, those fields in Components will be deleted"
  /template/{templateId}/components:
    parameters:
      - $ref: "#/components/parameters/templateId"
    get:
      summary: "Returns a list of all components who derive from this template"
      responses:
        "200":
          description: "Returns a list of all components"
          content:
            application/json:
              schema:
                type: array
                items:
                  schema:
                    $ref: "#/components/schemas/NewComponent"
components:
  parameters:
    templateId:
      in: path
      description: "ID of the template"
      name: templateId
      required: true
      schema:
        type: integer
  schemas:
    Exception:
      type: object
      properties:
        exceptionName:
          type: string
        exceptionMessage:
          type: string
    NewTemplate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        fields:
          type: array
          items:
            $ref: "#/components/schemas/FieldTemplate"
    FieldTemplate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        fieldType:
          type: string
        mandatory:
          type: boolean
        multivalued:
          type: boolean
    NewComponent:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        template:
          type: integer
        fields:
          type: array
          items:
            $ref: "#/components/schemas/Field"
    Field:
      type: object
      properties:
        fieldName:
          type: string
        fieldValue:
          type: string